package keyboards

import tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

func KeyboardConstructor(columns int, content [][]string) tgbotapi.InlineKeyboardMarkup {

	var keyboard [][]tgbotapi.InlineKeyboardButton
	var row []tgbotapi.InlineKeyboardButton

	colCounter := columns
	buttons := ButtonsMaker(content)

	for _, button := range buttons {

		row = append(row, button)
		colCounter--
		if colCounter == 0 {
			keyboard = append(keyboard, row)
			row = nil
			colCounter = columns
		}
	}

	if len(row) > 0 {
		keyboard = append(keyboard, row)
	}

	var markup tgbotapi.InlineKeyboardMarkup

	markup.InlineKeyboard = keyboard

	return markup
}

func ButtonsMaker(texts [][]string) []tgbotapi.InlineKeyboardButton {

	var buttons []tgbotapi.InlineKeyboardButton

	for _, button := range texts {
		text := button[0]
		callback := button[1]
		b := tgbotapi.NewInlineKeyboardButtonData(text, callback)
		buttons = append(buttons, b)
	}

	return buttons
}

var (

	// edit destination

	EditWhere = [][]string{
		{"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "editDestinationBack"},
	}

	KEditWhere = KeyboardConstructor(1, EditWhere)

	//partner's sex

	PartnersSex = [][]string{
		{"–ñ", "ps–ñ"},
		{"–ú", "ps–ú"},
		{"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "psBack"},
		{"–ù–µ –≤–∞–∂–Ω–æ üóø", "ps–Ω–µ –≤–∞–∂–Ω–æ"},
	}

	KPartnersSex = KeyboardConstructor(2, PartnersSex)

	EditPartnersSex = [][]string{
		{"–ñ", "eps–ñ"},
		{"–ú", "eps–ú"},
		{"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "epsBack"},
		{"–ù–µ –≤–∞–∂–Ω–æ üóø", "eps–Ω–µ –≤–∞–∂–Ω–æ"},
	}

	KEditPartnersSex = KeyboardConstructor(2, EditPartnersSex)

	PartnersAge = [][]string{
		{"üî≤ 18-24", "18-24"},
		{"üî≤ 25-34", "25-34"},
		{"üî≤ 35-44", "35-44"},
		{"üî≤ 45-54", "45-54"},
		{"üî≤ 55+", "55+"},
		{"–ù–µ –≤–∞–∂–Ω–æ!ü§òüèΩ", "pAge–Ω–µ –≤–∞–∂–Ω–æ"},
		{"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "partnersAgeBack"},
		{"–ì–æ—Ç–æ–≤–æ‚õ±", "savePartnersAge"},
	}

	KPartnersAge = KeyboardConstructor(2, PartnersAge)

	// edit short trip: partner's age

	EditPartnersAge = [][]string{
		{"üî≤ 18-24", "18-24"},
		{"üî≤ 25-34", "25-34"},
		{"üî≤ 35-44", "35-44"},
		{"üî≤ 45-54", "45-54"},
		{"üî≤ 55+", "55+"},
		{"–ù–µ –≤–∞–∂–Ω–æ!ü§òüèΩ", "epAge–Ω–µ –≤–∞–∂–Ω–æ"},
		{"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "ePartnersAgeBack"},
		{"–ì–æ—Ç–æ–≤–æ‚õ±", "esavePartnersAge"},
	}

	KEditPartnersAge = KeyboardConstructor(2, EditPartnersAge)

	//user's profile

	UserName = [][]string{
		{"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º", "useTGname"},
	}

	EditUserName = [][]string{
		{"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º", "euseTGname"},
	}

	UserSex = [][]string{
		{"–ñ", "u–ñ"},
		{"–ú", "u–ú"},
		{"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "userSexBack"},
		{"–¥—Ä—É–≥–æ–π/–Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å", "u–Ω–µ —É–∫–∞–∑–∞–Ω"},
	}

	EditUserSex = [][]string{
		{"–ñ", "eu–ñ"},
		{"–ú", "eu–ú"},
		{"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "euserSexBack"},
		{"–¥—Ä—É–≥–æ–π/–Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å", "eu–Ω–µ —É–∫–∞–∑–∞–Ω"},
	}

	UserAge = [][]string{
		{"18-24", "U18-24"},
		{"25-34", "U25-34"},
		{"35-44", "U35-44"},
		{"45-54", "U45-54"},
		{"55+", "U55+"},
		{"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "userAgeBack"},
	}

	EditUserAge = [][]string{
		{"18-24", "eU18-24"},
		{"25-34", "eU25-34"},
		{"35-44", "eU35-44"},
		{"45-54", "eU45-54"},
		{"55+", "eU55+"},
		{"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "euserAgeBack"},
	}

	Interests = [][]string{
		{"üî≤ –∫—É–ª—å—Ç—É—Ä–∞", "–∫—É–ª—å—Ç—É—Ä–∞"},
		{"üî≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è"},

		{"üî≤ —ç–∫—Å—Ç—Ä–∏–º", "—ç–∫—Å—Ç—Ä–∏–º"},
		{"üî≤ –ø—Ä–∏—Ä–æ–¥–∞", "–ø—Ä–∏—Ä–æ–¥–∞"},

		{"üî≤ –ó–û–ñ", "–ó–û–ñ"},
		{"üî≤ –∞–Ω—Ç–∏-–ó–û–ñ", "–∞–Ω—Ç–∏-–ó–û–ñ"},

		{"üî≤ –µ–¥–∞", "–µ–¥–∞"},
		{"üî≤ —Å–ø–æ—Ä—Ç", "—Å–ø–æ—Ä—Ç"},

		{"üî≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"},
		{"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "interestsBack"},
		{"üî≤ –≥–µ–π–º–∏–Ω–≥", "–≥–µ–π–º–∏–Ω–≥"},

		{"–ì–æ—Ç–æ–≤–æ!‚õ±", "saveInterests"},
	}

	EditInterests = [][]string{
		{"üî≤ –∫—É–ª—å—Ç—É—Ä–∞", "–∫—É–ª—å—Ç—É—Ä–∞"},
		{"üî≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è"},

		{"üî≤ —ç–∫—Å—Ç—Ä–∏–º", "—ç–∫—Å—Ç—Ä–∏–º"},
		{"üî≤ –ø—Ä–∏—Ä–æ–¥–∞", "–ø—Ä–∏—Ä–æ–¥–∞"},

		{"üî≤ –ó–û–ñ", "–ó–û–ñ"},
		{"üî≤ –∞–Ω—Ç–∏-–ó–û–ñ", "–∞–Ω—Ç–∏-–ó–û–ñ"},

		{"üî≤ –µ–¥–∞", "–µ–¥–∞"},
		{"üî≤ —Å–ø–æ—Ä—Ç", "—Å–ø–æ—Ä—Ç"},

		{"üî≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"},

		{"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "einterestsBack"},
		{"üî≤ –≥–µ–π–º–∏–Ω–≥", "–≥–µ–π–º–∏–Ω–≥"},
		{"–ì–æ—Ç–æ–≤–æ!‚õ±", "esaveInterests"},
	}

	AboutMe = [][]string{
		{"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "aboutMeBack"},
		{"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è", "skipAboutMe"},
	}

	EditAboutMe = [][]string{
		{"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "eaboutMeBack"},
	}

	Photo = [][]string{
		{"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "photoBack"},
	}

	EditPhoto = [][]string{
		{"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "ephotoBack"},
	}

	KUserName  = KeyboardConstructor(1, UserName)
	KUserSex   = KeyboardConstructor(2, UserSex)
	KUserAge   = KeyboardConstructor(3, UserAge)
	KInterests = KeyboardConstructor(3, Interests)
	KAboutMe   = KeyboardConstructor(2, AboutMe)
	KPhoto     = KeyboardConstructor(1, Photo)

	KEditUsername  = KeyboardConstructor(1, EditUserName)
	KEditUserSex   = KeyboardConstructor(1, EditUserSex)
	KEditUserAge   = KeyboardConstructor(3, EditUserAge)
	KEditInterests = KeyboardConstructor(3, EditInterests)
	KEditAboutMe   = KeyboardConstructor(1, EditAboutMe)
	KEditPhoto     = KeyboardConstructor(1, EditPhoto)

	//preview

	Preview = [][]string{
		{"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", "preview"},
	}

	KPreview = KeyboardConstructor(1, Preview)

	EditOrSearch = [][]string{
		{"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "editUserinfoOnPreview"},
		{"–ò—Å–∫–∞—Ç—å üß®", "go search"},
	}

	KEditOrSearch = KeyboardConstructor(1, EditOrSearch)

	Search = [][]string{
		{"–û–ö", "search"},
	}

	KSearch = KeyboardConstructor(1, Search)

	SearchRetry = [][]string{
		{"–ò—Å–∫–∞—Ç—å!üß®", "search"},
	}

	KSearchRetry = KeyboardConstructor(1, SearchRetry)

	EditUserinfo = [][]string{
		{"–§–æ—Ç–æ: –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ", "editPhoto"},
		{"–ò–º—è: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "editName"},
		{"–ü–æ–ª: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "editSex"},
		{"–í–æ–∑—Ä–∞—Å—Ç: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "editAge"},
		{"–û–±–æ –º–Ω–µ: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "editAboutMe"},
		{"–ò–Ω—Ç–µ—Ä–µ—Å—ã: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "editInterests"},
		{"–ü–æ–ª –ø–æ–ø—É—Ç—á–∏–∫–∞: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "editPsex"},
		{"–í–æ–∑—Ä–∞—Å—Ç –ø–æ–ø—É—Ç—á–∏–∫–∞: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "editPage"},
		{"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", "previewAfterEditUser"},
	}

	KEditUserinfo = KeyboardConstructor(1, EditUserinfo)

	NothingFound = [][]string{
		{"–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞", "preview"},
	}

	KNothingFound = KeyboardConstructor(1, NothingFound)

	//VIEWING SEARCH RESULTS

	CV = [][]string{
		{"‚ù§Ô∏è", "like"},
		{"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è", "nextCV"},
	}

	KCV = KeyboardConstructor(1, CV)

	NextCV = [][]string{
		{"–î–∞–ª—å—à–µ ‚û°Ô∏è", "nextCV"},
	}

	KNextCV = KeyboardConstructor(1, NextCV)

	EndOfFoundList = [][]string{
		{"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–Ω–æ–≤–æ", "watchCVsAgain"},
	}

	KEndOfFoundList = KeyboardConstructor(1, EndOfFoundList)

	//LIKE & MATCH

	SendMyUsername = [][]string{
		{"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π —é–∑–µ—Ä–Ω–µ–π–º", "sendMyUsername"},
	}

	KSendMyUsername = KeyboardConstructor(1, SendMyUsername)

	IWasLiked = [][]string{
		{"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π —é–∑–µ—Ä–Ω–µ–π–º", "sendMyUsername"},
		{"–î–∞–ª—å—à–µ ‚û°Ô∏è", "nextCV"},
	}

	KIWasLiked = KeyboardConstructor(1, IWasLiked)

	EnteredUsername = [][]string{
		{"–ó–∞–ø–æ–ª–Ω–∏–ª —é–∑–µ—Ä–Ω–µ–π–º, –ø–æ–≤—Ç–æ—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫—É", "repeatSendingUsername"},
		{"–°–∫—Ä—ã—Ç—å", "delete"},
	}

	KEnteredUsername = KeyboardConstructor(1, EnteredUsername)

	//MY PROFILE

	MyProfile = [][]string{
		{"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "editUserinfoGeneral"},
		{"–°–∫—Ä—ã—Ç—å", "delete"},
	}

	KMyProfile = KeyboardConstructor(1, MyProfile)

	//MY REQUESTS

	LikeView = [][]string{
		{"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π —é–∑–µ—Ä–Ω–µ–π–º", "sendMyUsername"},
		{"–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", "showNextRequest"},
	}

	KLikeView = KeyboardConstructor(1, LikeView)

	//MY MATCHES

	MatchView = [][]string{
		{"–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", "showNextMatch"},
	}

	KMatchView = KeyboardConstructor(1, MatchView)

	//other

	EmptyKeyboard = tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{},
	}

	Restart = [][]string{
		{"–°–¢–ê–†–¢", "newTrip"},
	}

	KRestart = KeyboardConstructor(1, Restart)

	Hide = [][]string{
		{"–°–∫—Ä—ã—Ç—å", "delete"},
	}

	KHide = KeyboardConstructor(1, Hide)

	AnswerFeedback = [][]string{
		{"–û—Ç–≤–µ—Ç–∏—Ç—å", "answerFeedback"},
	}

	KAnswerFeedback = KeyboardConstructor(1, AnswerFeedback)

	Delete = [][]string{
		{"OK", "delete"},
	}

	KDelete = KeyboardConstructor(1, Delete)
)
